export class ConversationMessageClient extends ChatBotKitClient {
    list(conversationId: string, request?: import('./v1.cjs').ConversationMessageListRequest): ResponsePromise<import('./v1.cjs').ConversationMessageListResponse, import('./v1.cjs').ConversationMessageListStreamType>;
    fetch(conversationId: string, messageId: string): Promise<import('./v1.cjs').ConversationMessageFetchResponse>;
    create(conversationId: string, request: import('./v1.cjs').ConversationMessageCreateRequest): Promise<import('./v1.cjs').ConversationMessageCreateResponse>;
    update(conversationId: string, messageId: string, request: import('./v1.cjs').ConversationMessageUpdateRequest): Promise<import('./v1.cjs').ConversationMessageUpdateResponse>;
    delete(conversationId: string, messageId: string): Promise<import('./v1.cjs').ConversationMessageDeleteResponse>;
    upvote(conversationId: string, messageId: string, request: import('./v1.cjs').ConversationMessageUpvoteRequest): Promise<import('./v1.cjs').ConversationMessageUpvoteResponse>;
    downvote(conversationId: string, messageId: string, request: import('./v1.cjs').ConversationMessageDownvoteRequest): Promise<import('./v1.cjs').ConversationMessageDownvoteResponse>;
}
export default ConversationMessageClient;
export type ResponsePromise<T, U> = import('../../client.cjs').ResponsePromise<T, U>;
import { ChatBotKitClient } from '../../client.cjs';
