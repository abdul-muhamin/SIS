export function listDatasetRecords(client: ChatBotKitClient, datasetId: string, request?: DatasetRecordListRequest | undefined): ResponsePromise<DatasetRecordListResponse, DatasetRecordListStreamType>;
export function fetchDatasetRecord(client: ChatBotKitClient, datasetId: string, recordId: string): Promise<DatasetRecordFetchResponse>;
export function createDatasetRecord(client: ChatBotKitClient, datasetId: string, request: DatasetRecordCreateRequest): Promise<DatasetRecordCreateResponse>;
export function updateDatasetRecord(client: ChatBotKitClient, datasetId: string, recordId: string, request: DatasetRecordUpdateRequest): Promise<DatasetRecordUpdateResponse>;
export function deleteDatasetRecord(client: ChatBotKitClient, datasetId: string, recordId: string): Promise<DatasetRecordDeleteResponse>;
export type ChatBotKitClient = import('../../client.js').ChatBotKitClient;
export type ResponsePromise<T, U> = import('../../client.js').ResponsePromise<T, U>;
export type DatasetRecordOptions = {
    text: string;
    meta?: Record<string, any>;
};
export type DatasetRecordInstance = DatasetRecordOptions & {
    id: string;
    createdAt: number;
    updatedAt: number;
};
export type DatasetRecordListRequest = {
    cursor?: string;
    order?: 'desc' | 'asc';
    take?: number;
    meta?: Record<string, string>;
};
export type DatasetRecordListResponse = {
    items: DatasetRecordInstance[];
};
export type DatasetRecordListStreamItem = {
    type: 'item';
    data: DatasetRecordInstance;
};
export type DatasetRecordListStreamType = DatasetRecordListStreamItem;
export type DatasetRecordFetchResponse = DatasetRecordInstance & {};
export type DatasetRecordCreateRequest = DatasetRecordOptions & {};
export type DatasetRecordCreateResponse = {
    id: string;
};
export type DatasetRecordUpdateRequest = DatasetRecordOptions & {};
export type DatasetRecordUpdateResponse = {
    id: string;
};
export type DatasetRecordDeleteResponse = {
    id: string;
};
