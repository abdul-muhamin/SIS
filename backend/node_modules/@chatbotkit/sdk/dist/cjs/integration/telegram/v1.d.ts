export function listTelegramIntegrations(client: ChatBotKitClient, request?: TelegramIntegrationListRequest): ResponsePromise<TelegramIntegrationListResponse, TelegramIntegrationListStreamType>;
export function fetchTelegramIntegration(client: ChatBotKitClient, telegramId: string): Promise<TelegramIntegrationFetchResponse>;
export function createTelegramIntegration(client: ChatBotKitClient, request: TelegramIntegrationCreateRequest): Promise<TelegramIntegrationCreateResponse>;
export function updateTelegramIntegration(client: ChatBotKitClient, telegramId: string, request: TelegramIntegrationUpdateRequest): Promise<TelegramIntegrationUpdateResponse>;
export function deleteTelegramIntegration(client: ChatBotKitClient, telegramId: string): Promise<TelegramIntegrationDeleteResponse>;
export function setupTelegramIntegration(client: ChatBotKitClient, telegramId: string): Promise<TelegramIntegrationSetupResponse>;
export type ChatBotKitClient = import('../../client.cjs').ChatBotKitClient;
export type ResponsePromise<T, U> = import('../../client.cjs').ResponsePromise<T, U>;
export type BotRef = {
    botId?: string;
};
export type BotConfig = {
    backstory?: string;
    model?: string;
    datasetId?: string;
    skillsetId?: string;
    privacy?: boolean;
    moderation?: boolean;
};
export type BotRefOrConfig = BotRef | BotConfig;
export type TelegramIntegrationOptions = BotRefOrConfig & {
    name?: string;
    description?: string;
    botToken?: string;
    sessionDuration?: number;
    attachments?: boolean;
    meta?: Record<string, any>;
};
export type TelegramIntegrationInstance = TelegramIntegrationOptions & {
    id: string;
    createdAt: number;
    updatedAt: number;
};
export type TelegramIntegrationListRequest = {
    cursor?: string;
    order?: 'desc' | 'asc';
    take?: number;
    meta?: Record<string, string>;
};
export type TelegramIntegrationListResponse = {
    items: TelegramIntegrationInstance[];
};
export type TelegramIntegrationListStreamItem = {
    type: 'item';
    data: TelegramIntegrationInstance;
};
export type TelegramIntegrationListStreamType = TelegramIntegrationListStreamItem;
export type TelegramIntegrationFetchResponse = TelegramIntegrationInstance & {};
export type TelegramIntegrationCreateRequest = TelegramIntegrationOptions & {
    model?: import('../../model/v1.cjs').Model;
};
export type TelegramIntegrationCreateResponse = {
    id: string;
};
export type TelegramIntegrationUpdateRequest = TelegramIntegrationOptions & {
    model?: import('../../model/v1.cjs').Model;
};
export type TelegramIntegrationUpdateResponse = {
    id: string;
};
export type TelegramIntegrationDeleteResponse = {
    id: string;
};
export type TelegramIntegrationSetupResponse = {
    id: string;
};
