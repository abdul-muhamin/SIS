import { getBuffer } from '../buffer.js';
export function listFiles(client, request) {
    let url = `/api/v1/file/list`;
    const response = client.clientFetch(url, { query: request });
    return response;
}
export async function fetchFile(client, fileId) {
    const url = `/api/v1/file/${fileId}/fetch`;
    const response = await client.clientFetch(url);
    return response;
}
export async function createFile(client, request) {
    const url = `/api/v1/file/create`;
    const response = await client.clientFetch(url, {
        record: {
            ...request,
        },
    });
    return response;
}
export async function updateFile(client, fileId, request) {
    const url = `/api/v1/file/${fileId}/update`;
    const response = await client.clientFetch(url, {
        record: {
            ...request,
        },
    });
    return response;
}
export async function deleteFile(client, fileId) {
    const url = `/api/v1/file/${fileId}/delete`;
    const response = await client.clientFetch(url, {
        record: {},
    });
    return response;
}
export async function uploadFile(client, fileId, request) {
    const url = `/api/v1/file/${fileId}/upload`;
    const buffer = getBuffer(request.data);
    const response = await client.clientFetch(url, {
        record: {
            file: {
                size: buffer.byteLength,
                type: request.type,
                name: request.name,
            },
        },
    });
    const { uploadRequest } = response;
    if (!uploadRequest) {
        throw new Error('Missing upload request');
    }
    await client.clientFetch(uploadRequest.url, {
        method: uploadRequest.method,
        headers: uploadRequest.headers,
        buffer: buffer,
        external: true,
    });
    return {
        id: response.id,
    };
}
export async function downloadFile(client, fileId) {
    const url = `/api/v1/file/${fileId}/download`;
    const response = client.clientFetch(url);
    return response;
}
