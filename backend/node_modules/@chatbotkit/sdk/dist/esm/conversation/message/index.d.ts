export class ConversationMessageClient extends ChatBotKitClient {
    list(conversationId: string, request?: import("./v1.js").ConversationMessageListRequest | undefined): ResponsePromise<import('./v1.js').ConversationMessageListResponse, import('./v1.js').ConversationMessageListStreamType>;
    fetch(conversationId: string, messageId: string): Promise<import('./v1.js').ConversationMessageFetchResponse>;
    create(conversationId: string, request: import('./v1.js').ConversationMessageCreateRequest): Promise<import('./v1.js').ConversationMessageCreateResponse>;
    update(conversationId: string, messageId: string, request: import('./v1.js').ConversationMessageUpdateRequest): Promise<import('./v1.js').ConversationMessageUpdateResponse>;
    delete(conversationId: string, messageId: string): Promise<import('./v1.js').ConversationMessageDeleteResponse>;
    upvote(conversationId: string, messageId: string, request: import('./v1.js').ConversationMessageUpvoteRequest): Promise<import('./v1.js').ConversationMessageUpvoteResponse>;
    downvote(conversationId: string, messageId: string, request: import('./v1.js').ConversationMessageDownvoteRequest): Promise<import('./v1.js').ConversationMessageDownvoteResponse>;
}
export default ConversationMessageClient;
export type ResponsePromise<T, U> = import('../../client.js').ResponsePromise<T, U>;
import { ChatBotKitClient } from '../../client.js';
