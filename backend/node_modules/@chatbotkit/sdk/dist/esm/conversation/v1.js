import { buildModelString } from '../model/v1.js';
export function listConversations(client, request) {
    let url = `/api/v1/conversation/list`;
    const response = client.clientFetch(url, { query: request });
    return response;
}
export async function fetchConversation(client, conversationId) {
    const url = `/api/v1/conversation/${conversationId}/fetch`;
    const response = await client.clientFetch(url);
    return response;
}
export async function createConversation(client, request) {
    const url = `/api/v1/conversation/create`;
    const response = await client.clientFetch(url, {
        record: {
            ...request,
            model: request.model ? buildModelString(request.model) : undefined,
        },
    });
    return response;
}
export async function updateConversation(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/update`;
    const response = await client.clientFetch(url, {
        record: {
            ...request,
            model: request.model ? buildModelString(request.model) : undefined,
        },
    });
    return response;
}
export async function deleteConversation(client, conversationId) {
    const url = `/api/v1/conversation/${conversationId}/delete`;
    const response = await client.clientFetch(url, {
        record: {},
    });
    return response;
}
export function completeConversation(client, request) {
    let url = `/api/v1/conversation/complete`;
    const response = client.clientFetch(url, {
        record: {
            ...request,
            model: request.model ? buildModelString(request.model) : undefined,
        },
    });
    return response;
}
export function completeConversationMessage(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/complete`;
    const response = client.clientFetch(url, {
        record: {
            ...request,
        },
    });
    return response;
}
export function sendConversationMessage(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/send`;
    const response = client.clientFetch(url, {
        record: {
            ...request,
        },
    });
    return response;
}
export function receiveConversationMessage(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/receive`;
    const response = client.clientFetch(url, {
        record: {
            ...request,
        },
    });
    return response;
}
export async function upvoteConversation(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/upvote`;
    const response = await client.clientFetch(url, {
        record: {
            value: 100,
            ...request,
        },
    });
    return response;
}
export async function downvoteConversation(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/downvote`;
    const response = await client.clientFetch(url, {
        record: {
            value: -100,
            ...request,
        },
    });
    return response;
}
