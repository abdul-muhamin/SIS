"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonl = exports.withRetry = exports.withTimeout = exports.FetchError = exports.TIMEOUT_ERROR_NAME = exports.ABORT_ERROR_NAME = exports.FormData = exports.Blob = exports.fetch = void 0;
const node_fetch_native_1 = require("node-fetch-native");
Object.defineProperty(exports, "Blob", { enumerable: true, get: function () { return node_fetch_native_1.Blob; } });
Object.defineProperty(exports, "FormData", { enumerable: true, get: function () { return node_fetch_native_1.FormData; } });
Object.defineProperty(exports, "fetch", { enumerable: true, get: function () { return node_fetch_native_1.fetch; } });
if (typeof globalThis.ReadableStream === 'function' &&
    typeof globalThis.ReadableStream.prototype[Symbol.asyncIterator] !==
        'function') {
    globalThis.ReadableStream.prototype[Symbol.asyncIterator] = function () {
        const reader = this.getReader();
        return {
            next: () => reader.read(),
            return: () => {
                reader.releaseLock();
            },
        };
    };
}
exports.ABORT_ERROR_NAME = 'AbortError';
exports.TIMEOUT_ERROR_NAME = 'TimeoutError';
function anySignal(signals) {
    const controller = new AbortController();
    for (const signal of signals) {
        if (signal.aborted) {
            controller.abort(signal.reason);
            return signal;
        }
        signal.addEventListener('abort', () => controller.abort(signal.reason), {
            signal: controller.signal,
        });
    }
    return controller.signal;
}
class FetchError extends Error {
    constructor(message, code, url, request, response) {
        super(message);
        this.code = code || response.status;
        this.url = url;
        this.request = request;
        this.response = response;
    }
}
exports.FetchError = FetchError;
function withTimeout(fetch, defaultOptions) {
    return async function fetchWithTimeout(url, options) {
        var _a, _b;
        const timeout = (_b = (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.timeout) !== null && _b !== void 0 ? _b : 30000;
        let signal;
        let handler;
        let isTimeOutAbort = false;
        if (timeout > 0 && timeout !== Infinity) {
            const abortController = new AbortController();
            handler = setTimeout(() => {
                isTimeOutAbort = true;
                abortController.abort(exports.TIMEOUT_ERROR_NAME);
            }, timeout);
            signal = (options === null || options === void 0 ? void 0 : options.signal)
                ? anySignal([abortController.signal, options.signal])
                : abortController.signal;
        }
        else {
            signal = options === null || options === void 0 ? void 0 : options.signal;
        }
        let response;
        try {
            response = await fetch(url, {
                ...options,
                signal,
            });
        }
        catch (error) {
            if ([error.name, error.message].includes(exports.ABORT_ERROR_NAME)) {
                if (isTimeOutAbort) {
                    throw new Error(exports.TIMEOUT_ERROR_NAME);
                }
            }
            throw error;
        }
        finally {
            clearTimeout(handler);
        }
        return response;
    };
}
exports.withTimeout = withTimeout;
function withRetry(fetch, defaultOptions) {
    return async function fetchWithRetry(url, options) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const retries = (_b = (_a = options === null || options === void 0 ? void 0 : options.retries) !== null && _a !== void 0 ? _a : defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.retries) !== null && _b !== void 0 ? _b : 5;
        const retryDelay = (_d = (_c = options === null || options === void 0 ? void 0 : options.retryDelay) !== null && _c !== void 0 ? _c : defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.retryDelay) !== null && _d !== void 0 ? _d : 250;
        const retryTimeout = (_f = (_e = options === null || options === void 0 ? void 0 : options.retryTimeout) !== null && _e !== void 0 ? _e : defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.retryTimeout) !== null && _f !== void 0 ? _f : false;
        const retryStatuses = (_h = (_g = options === null || options === void 0 ? void 0 : options.retryStatuses) !== null && _g !== void 0 ? _g : defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.retryStatuses) !== null && _h !== void 0 ? _h : [429, 500, 502, 503, 504];
        let response;
        try {
            response = await fetch(url, { ...options });
            if (!response.ok) {
                if (retryStatuses.includes(response.status)) {
                    throw new FetchError(`Request failed`, response.status, url, options || {}, response);
                }
                else {
                    return response;
                }
            }
            return response;
        }
        catch (error) {
            switch (true) {
                case [error.name, error.message].includes(exports.TIMEOUT_ERROR_NAME) &&
                    !retryTimeout:
                    {
                        throw error;
                    }
                case retries === 0: {
                    if (response) {
                        return response;
                    }
                    else {
                        throw error;
                    }
                }
            }
            await new Promise((resolve) => setTimeout(resolve, retryDelay));
            return await fetchWithRetry(url, {
                ...options,
                retries: retries - 1,
                retryDelay: retryDelay * 2,
            });
        }
    };
}
exports.withRetry = withRetry;
async function* jsonl(body) {
    const decoder = new TextDecoder();
    let previous = '';
    for await (const chunk of body) {
        previous += decoder.decode(chunk);
        let eolIndex;
        while ((eolIndex = previous.indexOf('\n')) >= 0) {
            const line = previous.slice(0, eolIndex + 1);
            if (line) {
                yield JSON.parse(line);
            }
            previous = previous.slice(eolIndex + 1);
        }
    }
    if (previous.trim().length > 0) {
        yield JSON.parse(previous);
    }
}
exports.jsonl = jsonl;
