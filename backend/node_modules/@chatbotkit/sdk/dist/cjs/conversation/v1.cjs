"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.downvoteConversation = exports.upvoteConversation = exports.receiveConversationMessage = exports.sendConversationMessage = exports.completeConversationMessage = exports.completeConversation = exports.deleteConversation = exports.updateConversation = exports.createConversation = exports.fetchConversation = exports.listConversations = void 0;
const v1_js_1 = require("../model/v1.cjs");
function listConversations(client, request) {
    let url = `/api/v1/conversation/list`;
    const response = client.clientFetch(url, { query: request });
    return response;
}
exports.listConversations = listConversations;
async function fetchConversation(client, conversationId) {
    const url = `/api/v1/conversation/${conversationId}/fetch`;
    const response = await client.clientFetch(url);
    return response;
}
exports.fetchConversation = fetchConversation;
async function createConversation(client, request) {
    const url = `/api/v1/conversation/create`;
    const response = await client.clientFetch(url, {
        record: {
            ...request,
            model: request.model ? (0, v1_js_1.buildModelString)(request.model) : undefined,
        },
    });
    return response;
}
exports.createConversation = createConversation;
async function updateConversation(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/update`;
    const response = await client.clientFetch(url, {
        record: {
            ...request,
            model: request.model ? (0, v1_js_1.buildModelString)(request.model) : undefined,
        },
    });
    return response;
}
exports.updateConversation = updateConversation;
async function deleteConversation(client, conversationId) {
    const url = `/api/v1/conversation/${conversationId}/delete`;
    const response = await client.clientFetch(url, {
        record: {},
    });
    return response;
}
exports.deleteConversation = deleteConversation;
function completeConversation(client, request) {
    let url = `/api/v1/conversation/complete`;
    const response = client.clientFetch(url, {
        record: {
            ...request,
            model: request.model ? (0, v1_js_1.buildModelString)(request.model) : undefined,
        },
    });
    return response;
}
exports.completeConversation = completeConversation;
function completeConversationMessage(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/complete`;
    const response = client.clientFetch(url, {
        record: {
            ...request,
        },
    });
    return response;
}
exports.completeConversationMessage = completeConversationMessage;
function sendConversationMessage(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/send`;
    const response = client.clientFetch(url, {
        record: {
            ...request,
        },
    });
    return response;
}
exports.sendConversationMessage = sendConversationMessage;
function receiveConversationMessage(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/receive`;
    const response = client.clientFetch(url, {
        record: {
            ...request,
        },
    });
    return response;
}
exports.receiveConversationMessage = receiveConversationMessage;
async function upvoteConversation(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/upvote`;
    const response = await client.clientFetch(url, {
        record: {
            value: 100,
            ...request,
        },
    });
    return response;
}
exports.upvoteConversation = upvoteConversation;
async function downvoteConversation(client, conversationId, request) {
    const url = `/api/v1/conversation/${conversationId}/downvote`;
    const response = await client.clientFetch(url, {
        record: {
            value: -100,
            ...request,
        },
    });
    return response;
}
exports.downvoteConversation = downvoteConversation;
