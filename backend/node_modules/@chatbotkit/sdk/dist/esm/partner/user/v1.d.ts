export function listPartnerUsers(client: ChatBotKitClient, request?: PartnerUserListRequest | undefined): ResponsePromise<PartnerUserListResponse, PartnerUserListStreamType>;
export function fetchPartnerUser(client: ChatBotKitClient, userId: string): Promise<PartnerUserFetchResponse>;
export function createPartnerUser(client: ChatBotKitClient, request: PartnerUserCreateRequest): Promise<PartnerUserCreateResponse>;
export function updatePartnerUser(client: ChatBotKitClient, userId: string, request: PartnerUserUpdateRequest): Promise<PartnerUserUpdateResponse>;
export function deletePartnerUser(client: ChatBotKitClient, userId: string): Promise<PartnerUserDeleteResponse>;
export type ChatBotKitClient = import('../../client.js').ChatBotKitClient;
export type ResponsePromise<T, U> = import('../../client.js').ResponsePromise<T, U>;
export type PartnerUserOptions = {
    name?: string;
    image?: string;
    meta?: Record<string, any>;
};
export type PartnerUserInstance = PartnerUserOptions & {
    id: string;
    createdAt: number;
    updatedAt: number;
};
export type PartnerUserListRequest = {
    cursor?: string;
    order?: 'desc' | 'asc';
    take?: number;
    meta?: Record<string, string>;
};
export type PartnerUserListResponse = {
    items: PartnerUserInstance[];
};
export type PartnerUserListStreamItem = {
    type: 'item';
    data: PartnerUserInstance;
};
export type PartnerUserListStreamType = PartnerUserListStreamItem;
export type PartnerUserFetchResponse = PartnerUserInstance & {};
export type PartnerUserCreateRequest = PartnerUserOptions & {};
export type PartnerUserCreateResponse = {
    id: string;
};
export type PartnerUserUpdateRequest = PartnerUserOptions & {};
export type PartnerUserUpdateResponse = {
    id: string;
};
export type PartnerUserDeleteResponse = {
    id: string;
};
