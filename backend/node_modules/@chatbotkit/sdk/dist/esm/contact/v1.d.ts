export function listContacts(client: ChatBotKitClient, request?: ContactListRequest | undefined): ResponsePromise<ContactListResponse, ContactListStreamType>;
export function fetchContact(client: ChatBotKitClient, contactId: string): Promise<ContactFetchResponse>;
export function createContact(client: ChatBotKitClient, request: ContactCreateRequest): Promise<ContactCreateResponse>;
export function updateContact(client: ChatBotKitClient, contactId: string, request: ContactUpdateRequest): Promise<ContactUpdateResponse>;
export function deleteContact(client: ChatBotKitClient, contactId: string): Promise<ContactDeleteResponse>;
export type ChatBotKitClient = import('../client.js').ChatBotKitClient;
export type ResponsePromise<T, U> = import('../client.js').ResponsePromise<T, U>;
export type ContactOptions = {
    name?: string;
    description?: string;
    email?: string;
    phone?: string;
    meta?: Record<string, any>;
};
export type ContactInstance = ContactOptions & {
    id: string;
    createdAt: number;
    updatedAt: number;
};
export type ContactListRequest = {
    cursor?: string;
    order?: 'desc' | 'asc';
    take?: number;
    meta?: Record<string, string>;
};
export type ContactListResponse = {
    items: ContactInstance[];
};
export type ContactListStreamItemType = {
    type: 'item';
    data: ContactInstance;
};
export type ContactListStreamType = ContactListStreamItemType;
export type ContactFetchResponse = ContactInstance & {};
export type ContactCreateRequest = ContactOptions & {
    model?: import('../model/v1.js').Model;
};
export type ContactCreateResponse = {
    id: string;
};
export type ContactUpdateRequest = ContactOptions & {
    model?: import('../model/v1.js').Model;
};
export type ContactUpdateResponse = {
    id: string;
};
export type ContactDeleteResponse = {
    id: string;
};
