export function listSecrets(client: ChatBotKitClient, request?: SecretListRequest | undefined): ResponsePromise<SecretListResponse, SecretListStreamType>;
export function fetchSecret(client: ChatBotKitClient, secretId: string): Promise<SecretFetchResponse>;
export function createSecret(client: ChatBotKitClient, request: SecretCreateRequest): Promise<SecretCreateResponse>;
export function updateSecret(client: ChatBotKitClient, secretId: string, request: SecretUpdateRequest): Promise<SecretUpdateResponse>;
export function deleteSecret(client: ChatBotKitClient, secretId: string): Promise<SecretDeleteResponse>;
export type ChatBotKitClient = import('../client.js').ChatBotKitClient;
export type ResponsePromise<T, U> = import('../client.js').ResponsePromise<T, U>;
export type SecretOptions = {
    name?: string;
    description?: string;
    type?: 'bearer' | 'plain' | 'basic';
    value?: string;
    meta?: Record<string, any>;
};
export type SecretInstance = SecretOptions & {
    id: string;
    createdAt: number;
    updatedAt: number;
};
export type SecretListRequest = {
    cursor?: string;
    order?: 'desc' | 'asc';
    take?: number;
    meta?: Record<string, string>;
};
export type SecretListResponse = {
    items: SecretInstance[];
};
export type SecretListStreamItemType = {
    type: 'item';
    data: SecretInstance;
};
export type SecretListStreamType = SecretListStreamItemType;
export type SecretFetchResponse = SecretInstance & {};
export type SecretCreateRequest = SecretOptions & {
    model?: import('../model/v1.js').Model;
};
export type SecretCreateResponse = {
    id: string;
};
export type SecretUpdateRequest = SecretOptions & {
    model?: import('../model/v1.js').Model;
};
export type SecretUpdateResponse = {
    id: string;
};
export type SecretDeleteResponse = {
    id: string;
};
