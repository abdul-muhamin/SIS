export class ResponsePromise<T, U> {
    constructor(url: URL | string, request: {
        method: string;
        headers: Record<string, any>;
        data?: any;
    });
    url: string | URL;
    request: {
        method: string;
        headers: Record<string, any>;
        data?: any;
    };
    decoder: TextDecoder;
    fetchPromise: Promise<Response> | null;
    streamPromise: Promise<Response> | null;
    getRequest(params?: {
        method?: string | undefined;
        headers?: Record<string, any> | undefined;
        data?: any;
    } | undefined): Promise<Response>;
    getFetchPromise(): Promise<Response>;
    getStreamPromise(): Promise<Response>;
    then(onSuccess: (...args: any[]) => any, onFail: (...args: any[]) => any): Promise<T>;
    catch(fn: (...args: any[]) => any): Promise<any>;
    finally(fn: (...args: any[]) => any): Promise<Response>;
    stream(): AsyncGenerator<U>;
    get [Symbol.toStringTag](): string;
}
export class ChatBotKitClient {
    constructor(options: ChatBotKitClientOptions);
    secret: string;
    url: URL;
    endpoints: Record<string, string>;
    runAsUserId: string | undefined;
    clientFetch<T, U>(path: string, options?: {
        method?: string | undefined;
        headers?: Record<string, any> | undefined;
        query?: Record<string, any> | undefined;
        record?: Record<string, any> | undefined;
        buffer?: ArrayBuffer | undefined;
        file?: {
            name?: string | undefined;
            type?: string | undefined;
            data: string | ArrayBuffer;
        } | undefined;
        external?: boolean | undefined;
    } | undefined): ResponsePromise<T, U>;
}
export type ChatBotKitClientOptions = {
    secret: string;
    host?: string | undefined;
    protocol?: "http:" | "https" | undefined;
    endpoints?: Record<string, string> | undefined;
    runAsUserId?: string | undefined;
};
