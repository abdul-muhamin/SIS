export function listConversations(client: ChatBotKitClient, request?: ConversationListRequest | undefined): ResponsePromise<ConversationListResponse, ConversationListStreamType>;
export function fetchConversation(client: ChatBotKitClient, conversationId: string): Promise<ConversationFetchResponse>;
export function createConversation(client: ChatBotKitClient, request: ConversationCreateRequest): Promise<ConversationCreateResponse>;
export function updateConversation(client: ChatBotKitClient, conversationId: string, request: ConversationUpdateRequest): Promise<ConversationUpdateResponse>;
export function deleteConversation(client: ChatBotKitClient, conversationId: string): Promise<ConversationDeleteResponse>;
export function completeConversation(client: ChatBotKitClient, request: ConversationCompleteRequest): ResponsePromise<ConversationCompleteResponse, ConversationCompleteStreamType>;
export function completeConversationMessage(client: ChatBotKitClient, conversationId: string, request: ConversationCompleteMessageRequest): ResponsePromise<ConversationCompleteMessageResponse, ConversationCompleteMessageStreamType>;
export function sendConversationMessage(client: ChatBotKitClient, conversationId: string, request: ConversationSendMessageRequest): ResponsePromise<ConversationSendMessageResponse, ConversationSendMessageStreamType>;
export function receiveConversationMessage(client: ChatBotKitClient, conversationId: string, request: ConversationReceiveMessageRequest): ResponsePromise<ConversationReceiveMessageResponse, ConversationReceiveMessageStreamType>;
export function upvoteConversation(client: ChatBotKitClient, conversationId: string, request: ConversationUpvoteRequest): Promise<ConversationUpvoteResponse>;
export function downvoteConversation(client: ChatBotKitClient, conversationId: string, request: ConversationDownvoteRequest): Promise<ConversationDownvoteResponse>;
export type ChatBotKitClient = import('../client.js').ChatBotKitClient;
export type ResponsePromise<T, U> = import('../client.js').ResponsePromise<T, U>;
export type ConversationOptions = {
    botId?: string;
    backstory?: string;
    model?: string;
    datasetId?: string;
    skillsetId?: string;
    meta?: Record<string, any>;
};
export type ConversationInstance = ConversationOptions & {
    id: string;
    createdAt: number;
    updatedAt: number;
};
export type MessageType = 'user' | 'bot' | 'context' | 'instruction' | 'backstory' | 'activity';
export type Message = {
    type: MessageType;
    text: string;
    meta?: Record<string, any>;
};
export type Entity = {
    type: string;
    begin: number;
    end: number;
    text: string;
    replacement?: {
        begin: number;
        end: number;
        text: string;
    };
};
export type ConversationListRequest = {
    cursor?: string;
    order?: 'desc' | 'asc';
    take?: number;
    meta?: Record<string, string>;
};
export type ConversationListResponse = {
    items: ConversationInstance[];
};
export type ConversationListStreamItem = {
    type: 'item';
    data: ConversationInstance;
};
export type ConversationListStreamType = ConversationListStreamItem;
export type ConversationFetchResponse = ConversationInstance & {};
export type ConversationCreateRequest = ConversationOptions & {
    model?: import('../model/v1.js').Model;
};
export type ConversationCreateResponse = {
    id: string;
};
export type ConversationUpdateRequest = ConversationOptions & {
    model?: import('../model/v1.js').Model;
};
export type ConversationUpdateResponse = {
    id: string;
};
export type ConversationDeleteResponse = {
    id: string;
};
export type ConversationCompleteRequest = {
    backstory?: string;
    model?: import('../model/v1.js').Model;
    messages?: Message[];
    datasetId?: string;
    skillsetId?: string;
    privacy?: boolean;
    moderation?: boolean;
    functions?: {
        name: string;
        description: string;
        parameters: any;
    }[];
} & ({
    text: string;
} | {
    messages: Message[];
});
export type ConversationCompleteResponse = {
    text: string;
    usage: {
        token: number;
    };
};
export type ConversationCompleteStreamResult = {
    type: 'result';
    data: ConversationCompleteResponse;
};
export type ConversationCompleteStreamToken = {
    type: 'token';
    data: {
        token: string;
    };
};
export type ConversationCompleteMessage = {
    type: 'message';
    data: Message;
};
export type ConversationCompleteStreamType = ConversationCompleteStreamResult | ConversationCompleteStreamToken | ConversationCompleteMessage;
export type ConversationCompleteMessageRequest = {
    text: string;
    entities?: Entity[];
};
export type ConversationCompleteMessageResponse = {
    id: string;
    text: string;
    usage: {
        token: number;
    };
};
export type ConversationCompleteMessageStreamResult = {
    type: 'result';
    data: ConversationCompleteMessageResponse;
};
export type ConversationCompleteMessageStreamToken = {
    type: 'token';
    data: {
        token: string;
    };
};
export type ConversationCompleteMessageStreamType = ConversationCompleteMessageStreamResult | ConversationCompleteMessageStreamToken;
export type ConversationSendMessageRequest = {
    text?: string;
    entities?: Entity[];
};
export type ConversationSendMessageResponse = {
    id: string;
    entities: Entity[];
};
export type ConversationSendMessageStreamResult = {
    type: 'result';
    data: ConversationSendMessageResponse;
};
export type ConversationSendMessageStreamType = ConversationSendMessageStreamResult;
export type ConversationReceiveMessageRequest = {};
export type ConversationReceiveMessageResponse = {
    id: string;
    text: string;
    usage: {
        token: number;
    };
};
export type ConversationReceiveMessageStreamResult = {
    type: 'result';
    data: ConversationReceiveMessageResponse;
};
export type ConversationReceiveMessageStreamToken = {
    type: 'token';
    data: {
        token: string;
    };
};
export type ConversationReceiveMessageStreamType = ConversationReceiveMessageStreamResult | ConversationReceiveMessageStreamToken;
export type ConversationUpvoteRequest = {
    value?: number;
};
export type ConversationUpvoteResponse = {
    id: string;
};
export type ConversationDownvoteRequest = {
    value?: number;
};
export type ConversationDownvoteResponse = {
    id: string;
};
