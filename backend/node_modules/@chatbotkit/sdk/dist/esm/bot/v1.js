import { buildModelString } from '../model/v1.js';
export function listBots(client, request) {
    let url = `/api/v1/bot/list`;
    const response = client.clientFetch(url, { query: request });
    return response;
}
export async function fetchBot(client, botId) {
    const url = `/api/v1/bot/${botId}/fetch`;
    const response = await client.clientFetch(url);
    return response;
}
export async function createBot(client, request) {
    const url = `/api/v1/bot/create`;
    const response = await client.clientFetch(url, {
        record: {
            ...request,
            model: request.model ? buildModelString(request.model) : undefined,
        },
    });
    return response;
}
export async function updateBot(client, botId, request) {
    const url = `/api/v1/bot/${botId}/update`;
    const response = await client.clientFetch(url, {
        record: {
            ...request,
            model: request.model ? buildModelString(request.model) : undefined,
        },
    });
    return response;
}
export async function deleteBot(client, botId) {
    const url = `/api/v1/bot/${botId}/delete`;
    const response = await client.clientFetch(url, {
        record: {},
    });
    return response;
}
export async function upvoteBot(client, botId, request) {
    const url = `/api/v1/bot/${botId}/upvote`;
    const response = await client.clientFetch(url, {
        record: {
            value: 100,
            ...request,
        },
    });
    return response;
}
export async function downvoteBot(client, botId, request) {
    const url = `/api/v1/bot/${botId}/downvote`;
    const response = await client.clientFetch(url, {
        record: {
            value: -100,
            ...request,
        },
    });
    return response;
}
