export function listDiscordIntegrations(client: ChatBotKitClient, request?: DiscordIntegrationListRequest | undefined): ResponsePromise<DiscordIntegrationListResponse, DiscordIntegrationListStreamType>;
export function fetchDiscordIntegration(client: ChatBotKitClient, discordId: string): Promise<DiscordIntegrationFetchResponse>;
export function createDiscordIntegration(client: ChatBotKitClient, request: DiscordIntegrationCreateRequest): Promise<DiscordIntegrationCreateResponse>;
export function updateDiscordIntegration(client: ChatBotKitClient, discordId: string, request: DiscordIntegrationUpdateRequest): Promise<DiscordIntegrationUpdateResponse>;
export function deleteDiscordIntegration(client: ChatBotKitClient, discordId: string): Promise<DiscordIntegrationDeleteResponse>;
export function setupDiscordIntegration(client: ChatBotKitClient, discordId: string): Promise<DiscordIntegrationSetupResponse>;
export type ChatBotKitClient = import('../../client.js').ChatBotKitClient;
export type ResponsePromise<T, U> = import('../../client.js').ResponsePromise<T, U>;
export type BotRef = {
    botId?: string;
};
export type BotConfig = {
    backstory?: string;
    model?: string;
    datasetId?: string;
    skillsetId?: string;
    privacy?: boolean;
    moderation?: boolean;
};
export type BotRefOrConfig = BotRef | BotConfig;
export type DiscordIntegrationOptions = BotRefOrConfig & {
    name?: string;
    description?: string;
    appId?: string;
    botToken?: string;
    publicKey?: string;
    handle?: string;
    sessionDuration?: number;
    meta?: Record<string, any>;
};
export type DiscordIntegrationInstance = DiscordIntegrationOptions & {
    id: string;
    createdAt: number;
    updatedAt: number;
};
export type DiscordIntegrationListRequest = {
    cursor?: string;
    order?: 'desc' | 'asc';
    take?: number;
    meta?: Record<string, string>;
};
export type DiscordIntegrationListResponse = {
    items: DiscordIntegrationInstance[];
};
export type DiscordIntegrationListStreamItem = {
    type: 'item';
    data: DiscordIntegrationInstance;
};
export type DiscordIntegrationListStreamType = DiscordIntegrationListStreamItem;
export type DiscordIntegrationFetchResponse = DiscordIntegrationInstance & {};
export type DiscordIntegrationCreateRequest = DiscordIntegrationOptions & {
    model?: import('../../model/v1.js').Model;
};
export type DiscordIntegrationCreateResponse = {
    id: string;
};
export type DiscordIntegrationUpdateRequest = DiscordIntegrationOptions & {
    model?: import('../../model/v1.js').Model;
};
export type DiscordIntegrationUpdateResponse = {
    id: string;
};
export type DiscordIntegrationDeleteResponse = {
    id: string;
};
export type DiscordIntegrationSetupResponse = {
    id: string;
};
