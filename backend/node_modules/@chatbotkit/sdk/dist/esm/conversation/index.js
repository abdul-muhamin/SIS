import { ChatBotKitClient } from '../client.js';
import { ConversationAttachmentClient } from './attachment/index.js';
import { ConversationMessageClient } from './message/index.js';
import { ConversationSessionClient } from './session/index.js';
import { completeConversation, completeConversationMessage, createConversation, deleteConversation, downvoteConversation, fetchConversation, listConversations, receiveConversationMessage, sendConversationMessage, updateConversation, upvoteConversation, } from './v1.js';
export class ConversationClient extends ChatBotKitClient {
    constructor(options) {
        super(options);
        this.message = new ConversationMessageClient(options);
        this.session = new ConversationSessionClient(options);
        this.attachment = new ConversationAttachmentClient(options);
    }
    list(request) {
        return listConversations(this, request);
    }
    fetch(conversationId) {
        return fetchConversation(this, conversationId);
    }
    create(request) {
        return createConversation(this, request);
    }
    update(conversationId, request) {
        return updateConversation(this, conversationId, request);
    }
    delete(conversationId) {
        return deleteConversation(this, conversationId);
    }
    complete(conversationId, request) {
        if (!conversationId) {
            return completeConversation(this, (request));
        }
        else {
            return completeConversationMessage(this, conversationId, (request));
        }
    }
    send(conversationId, request) {
        return sendConversationMessage(this, conversationId, request);
    }
    receive(conversationId, request) {
        return receiveConversationMessage(this, conversationId, request);
    }
    upvote(conversationId, request) {
        return upvoteConversation(this, conversationId, request);
    }
    downvote(conversationId, request) {
        return downvoteConversation(this, conversationId, request);
    }
}
export default ConversationClient;
