export function withTimeout(fetch: FetchFn, defaultOptions?: withTimeoutOptions): FetchFn;
export function withRetry(fetch: FetchFn, defaultOptions?: withRetryOptions): FetchFn;
export function jsonl(body: ReadableStream<Uint8Array> & {
    [Symbol.asyncIterator](): AsyncIterator<Uint8Array>;
}): AsyncGenerator<Record<string, any>>;
export const ABORT_ERROR_NAME: "AbortError";
export const TIMEOUT_ERROR_NAME: "TimeoutError";
export class FetchError extends Error {
    constructor(message: string, code: number | string, url: string, request: RequestInit & withTimeoutOptions & withRetryOptions, response: Response);
    code: string | number;
    url: string;
    request: RequestInit & withTimeoutOptions & withRetryOptions;
    response: Response;
}
export type FetchFn = (url: string, options?: RequestInit) => Promise<Response>;
export type withTimeoutOptions = {
    timeout?: number;
};
export type withRetryOptions = {
    retries?: number;
    retryDelay?: number;
    retryTimeout?: boolean;
    retryStatuses?: number[];
};
import { fetch } from 'node-fetch-native';
import { Blob } from 'node-fetch-native';
import { FormData } from 'node-fetch-native';
export { fetch, Blob, FormData };
